@page "/"
@rendermode InteractiveServer

<PageTitle>Notes List</PageTitle>

@code
{
    protected override async Task OnInitializedAsync()
    {
        SearchValue = NavigationManager.GetParameterFromUrl("searchValue");
        await LoadNotes();
    }
}

<h1>Notes Page</h1>

<form id="searchForm" method="GET">
    <input type="text" id="searchInput" name="searchValue">
    <button type="submit">Search</button>
</form>

<button @onclick="CreateNote">+</button>

@if (Notes == null)
{
    <p><em>Loading...</em></p>
}
else if (Notes.Count == 0 && !string.IsNullOrEmpty(SearchValue))
{
    <p>No notes found for this search term</p>
}
else if (Notes.Count == 0)
{
    <p>There is no created notes yet</p>
}
else
{
    foreach (var note in Notes)
    {
        <EditForm Model="note" OnSubmit="() => UpdateNote(note)" FormName="@(nameof(note) + note.Id)">
            <div>
                <label>Title:</label>
                <InputText @bind-Value="note.Title" />

                <label>Content:</label>
                <InputTextArea @bind-Value="note.Content" style="resize: none"/>
            </div>
            <div>
                <p>Created @note.CreatedAt.FormatDifferenceFromNow()</p>
                @if (note.UpdatedAt != null)
                {
                    <p>Updated @note.UpdatedAt.Value.FormatDifferenceFromNow()</p>
                }
            </div>
            <div>
                <button type="button" @onclick="() => RefreshNote(note)">Refresh</button>
                <button type="submit">Save</button>
                <button type="button" @onclick="() => DeleteNote(note.Id)">Delete</button>
            </div>
        </EditForm>
        <br/>
    }
}